// Generated by CoffeeScript 1.7.1
(function() {
  var Promise, async, basePath, concurrency, config, convert2HTML, fs, generateIndexPage, htmlPath, indexPath, indexTemplate, initHTML, marked, mustache, pageTemplate, parseMarkdownFile, path, postsPath, renameHTMLFile, theme;

  Promise = require('bluebird');

  async = require('async');

  marked = require('marked');

  mustache = require('mustache');

  fs = require('fs');

  path = require('path');

  config = require('../config');

  Promise.promisifyAll(fs);

  basePath = "" + __dirname + "/../";

  postsPath = basePath + config.posts_path;

  htmlPath = basePath + config.html_output_path;

  indexPath = basePath + config.index_page_path;

  pageTemplate = fs.readFileSync(basePath + config.post_template, "utf8");

  indexTemplate = fs.readFileSync(basePath + config.index_page_template, "utf8");

  theme = config.default_theme;

  concurrency = config.concurrency || 5;

  renameHTMLFile = function(filename) {
    return path.basename(filename, '.md') + ".html";
  };

  parseMarkdownFile = function(filename) {
    var pieces;
    pieces = filename.split("-");
    return {
      title: pieces.slice(3).join(' ').replace('.md', ''),
      time: pieces.slice(0, 3).join('-'),
      filename: renameHTMLFile(filename)
    };
  };

  initHTML = function(filename, mdOutput) {
    var fileInfo;
    fileInfo = parseMarkdownFile(filename);
    return mustache.render(pageTemplate, {
      title: fileInfo.title + " @ " + fileInfo.time,
      body: mdOutput,
      stylesheets: ["../themes/" + theme + "/index.css"].concat(config.stylesheets),
      scripts: [].concat(config.scripts)
    });
  };

  convert2HTML = function(filename, next) {
    var filePath;
    console.log("converting " + filename + " ...");
    filePath = postsPath + ("/" + filename);
    return fs.readFileAsync(filePath, 'utf8').then(function(content) {
      var newPath;
      newPath = htmlPath + "/" + renameHTMLFile(filename);
      return fs.writeFileAsync(newPath, initHTML(filename, marked(content)));
    }).then(next)["catch"](function(err) {
      console.log("got an error when converting " + filename);
      console.error(err);
      return next();
    });
  };

  generateIndexPage = function(files) {
    return mustache.render(indexTemplate, {
      title: config.site_name,
      about_me: config.about_me,
      items: files.map(parseMarkdownFile).reverse(),
      stylesheets: ["./themes/" + theme + "/index.css"],
      scripts: []
    });
  };

  fs.readdirAsync(postsPath).then(function(files) {
    console.log("you have wrote " + files.length + " articles via markdown.");
    return new Promise(function(resolve, reject) {
      return async.eachLimit(files, concurrency, convert2HTML, function(err) {
        if (err) {
          return reject(err);
        }
        return resolve(files);
      });
    });
  }).then(function(files) {
    fs.writeFileAsync(indexPath, generateIndexPage(files));
    return console.log("congrats, your blog has been updated.");
  })["catch"](function(err) {
    console.log("oops, some error happened.");
    return console.log(err);
  });

}).call(this);
